//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public TakenComponent taken { get { return (TakenComponent)GetComponent(GameComponentsLookup.Taken); } }
    public bool hasTaken { get { return HasComponent(GameComponentsLookup.Taken); } }

    public void AddTaken(SignType newSignType) {
        var index = GameComponentsLookup.Taken;
        var component = (TakenComponent)CreateComponent(index, typeof(TakenComponent));
        component.SignType = newSignType;
        AddComponent(index, component);
    }

    public void ReplaceTaken(SignType newSignType) {
        var index = GameComponentsLookup.Taken;
        var component = (TakenComponent)CreateComponent(index, typeof(TakenComponent));
        component.SignType = newSignType;
        ReplaceComponent(index, component);
    }

    public void RemoveTaken() {
        RemoveComponent(GameComponentsLookup.Taken);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherTaken;

    public static Entitas.IMatcher<GameEntity> Taken {
        get {
            if (_matcherTaken == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Taken);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherTaken = matcher;
            }

            return _matcherTaken;
        }
    }
}
