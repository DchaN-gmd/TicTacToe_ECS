//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigContext {

    public ConfigEntity configuratorEntity { get { return GetGroup(ConfigMatcher.Configurator).GetSingleEntity(); } }
    public ConfiguratorComponent configurator { get { return configuratorEntity.configurator; } }
    public bool hasConfigurator { get { return configuratorEntity != null; } }

    public ConfigEntity SetConfigurator(IConfigurator newValue) {
        if (hasConfigurator) {
            throw new Entitas.EntitasException("Could not set Configurator!\n" + this + " already has an entity with ConfiguratorComponent!",
                "You should check if the context already has a configuratorEntity before setting it or use context.ReplaceConfigurator().");
        }
        var entity = CreateEntity();
        entity.AddConfigurator(newValue);
        return entity;
    }

    public void ReplaceConfigurator(IConfigurator newValue) {
        var entity = configuratorEntity;
        if (entity == null) {
            entity = SetConfigurator(newValue);
        } else {
            entity.ReplaceConfigurator(newValue);
        }
    }

    public void RemoveConfigurator() {
        configuratorEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigEntity {

    public ConfiguratorComponent configurator { get { return (ConfiguratorComponent)GetComponent(ConfigComponentsLookup.Configurator); } }
    public bool hasConfigurator { get { return HasComponent(ConfigComponentsLookup.Configurator); } }

    public void AddConfigurator(IConfigurator newValue) {
        var index = ConfigComponentsLookup.Configurator;
        var component = (ConfiguratorComponent)CreateComponent(index, typeof(ConfiguratorComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceConfigurator(IConfigurator newValue) {
        var index = ConfigComponentsLookup.Configurator;
        var component = (ConfiguratorComponent)CreateComponent(index, typeof(ConfiguratorComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveConfigurator() {
        RemoveComponent(ConfigComponentsLookup.Configurator);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigMatcher {

    static Entitas.IMatcher<ConfigEntity> _matcherConfigurator;

    public static Entitas.IMatcher<ConfigEntity> Configurator {
        get {
            if (_matcherConfigurator == null) {
                var matcher = (Entitas.Matcher<ConfigEntity>)Entitas.Matcher<ConfigEntity>.AllOf(ConfigComponentsLookup.Configurator);
                matcher.componentNames = ConfigComponentsLookup.componentNames;
                _matcherConfigurator = matcher;
            }

            return _matcherConfigurator;
        }
    }
}
